# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:09:08+00:00

from __future__ import annotations

from datetime import date, datetime
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class AccountStage(BaseModel):
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Account Stage was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    id: Optional[int] = Field(None, description='ID of Account Stage', examples=[1])
    name: Optional[str] = Field(
        None, description='Name of Account Stage', examples=['In Progress']
    )
    order: Optional[int] = Field(
        None, description='Order of Account Stage', examples=[3]
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Account Stage was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )


class AccountTier(BaseModel):
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Account Tier was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    id: Optional[int] = Field(None, description='ID of Account Tier', examples=[1])
    name: Optional[str] = Field(
        None, description='Name of the Account Tier', examples=['High Priority']
    )
    order: Optional[int] = Field(
        None, description='The order of the account tier', examples=[2]
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Account Tier was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )


class Activity(BaseModel):
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Activity was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )


class ActivityHistory(BaseModel):
    created_at: Optional[datetime] = Field(
        None,
        description='When this record was created',
        examples=['2019-01-01T00:00:00.000000Z'],
    )
    dynamic_data: Optional[Dict[str, Any]] = Field(
        None,
        description='Attributes from associated records. This is specific to the type of activity and may change over time. Not returned for create requests',
        examples=[
            {
                'counts': {'clicks': 2, 'replies': 1, 'views': 3},
                'status': 'sent',
                'subject': 'Welcome to SalesLoft',
            }
        ],
    )
    failed_dynamic_resources: Optional[Dict[str, Any]] = Field(
        None,
        description='A list of remote resource names that failed to load. This is specific to the type of activity and may change over time. Not returned for create requests',
        examples=[['email']],
    )
    id: Optional[int] = Field(None, description='ID of this activity', examples=[1])
    occurred_at: Optional[datetime] = Field(
        None,
        description='When this activity occurred',
        examples=['2019-01-01T00:00:00.000000Z'],
    )
    pinned_at: Optional[datetime] = Field(
        None,
        description='When this record was pinned',
        examples=['2019-01-01T00:00:00.000000Z'],
    )
    resource_id: Optional[int] = Field(
        None,
        description='ID of the resource this activity is for. It will be a string for the following resource types: crm_opportunity',
        examples=[1],
    )
    resource_type: Optional[int] = Field(
        None,
        description='Type of the resource this activity is for. One of: account, person',
        examples=['person'],
    )
    static_data: Optional[Dict[str, Any]] = Field(
        None,
        description='The static data for this activity',
        examples=[{'email_id': 2}],
    )
    type: Optional[str] = Field(
        None, description='The type of activity', examples=['email']
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='When this record was updated',
        examples=['2019-01-01T00:00:00.000000Z'],
    )
    user_guid: Optional[str] = Field(
        None,
        description='UUID of the user this activity is for',
        examples=['51398ccd-309e-467f-aae2-4b0f66b5c11d'],
    )


class BulkJob(BaseModel):
    created_at: Optional[datetime] = Field(
        None,
        description='When this bulk job was created',
        examples=['2019-01-01T00:00:00-05:00'],
    )
    errors: Optional[int] = Field(
        None,
        description='Number of errored records at the time of request for this Bulk Job',
        examples=[23],
    )
    finished_at: Optional[datetime] = Field(
        None,
        description='When this bulk job finished processing',
        examples=['2019-01-02T00:00:00-05:00'],
    )
    id: Optional[int] = Field(None, description='ID of this Bulk Job', examples=[1])
    marked_ready_at: Optional[datetime] = Field(
        None,
        description='When this bulk job was marked as ready to execute',
        examples=['2019-01-02T00:00:00-05:00'],
    )
    name: Optional[str] = Field(
        None, description='Name of this Bulk Job', examples=['Job Name']
    )
    processed: Optional[int] = Field(
        None,
        description='Number of processed records at the time of request for this Bulk Job',
        examples=[50],
    )
    ready_to_execute: Optional[bool] = Field(
        None,
        description='Whether the Bulk Job is ready to be executed',
        examples=[False],
    )
    scopes: Optional[List] = Field(
        None, description='Scopes', examples=[['person:set_crm_id']]
    )
    started_at: Optional[datetime] = Field(
        None,
        description='When this bulk job started processing. null until bulk job is done',
        examples=['2019-01-02T00:00:00-05:00'],
    )
    state: Optional[str] = Field(
        None,
        description='State of the Bulk Job.  Must be one of: open, executing, done.',
        examples=['open'],
    )
    total: Optional[int] = Field(
        None, description='Number of total records for this Bulk Job', examples=[1234]
    )
    type: Optional[str] = Field(
        None, description='Type of the Bulk Job.', examples=['person/upsert']
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='When this bulk job was updated',
        examples=['2019-01-02T00:00:00-05:00'],
    )


class BulkJobResult(BaseModel):
    error: Optional[str] = Field(
        None,
        description='Error message for the record that was processed. Will be null if there was no error.',
        examples=['Missing required field: email address'],
    )
    id: Optional[int] = Field(
        None, description='ID of the record that was processed', examples=[1]
    )
    record: Optional[Dict[str, Any]] = Field(
        None,
        description='The data that was used to process the operation',
        examples=['{first_name: "John", last_name: "Smith"}'],
    )
    resource: Optional[Dict[str, Any]] = Field(
        None,
        description='The object containing the resulting resource from performing the bulk action on this record',
        examples=['{person: {...}, upsert_type: "create"}'],
    )
    status: Optional[str] = Field(
        None,
        description='Status of the record that was processed. Will be one of: success, error',
        examples=['error'],
    )


class CadenceCounts(BaseModel):
    cadence_people: Optional[int] = Field(
        None,
        description='The number of people that have ever been added to the cadence',
        examples=[59],
    )
    meetings_booked: Optional[int] = Field(
        None,
        description='The number of meetings booked and attributed to the cadence',
        examples=[10],
    )
    opportunities_created: Optional[int] = Field(
        None,
        description='The number of opportunities created and attributed to the cadence',
        examples=[10],
    )
    people_acted_on_count: Optional[int] = Field(
        None,
        description='The number of people that have been skipped, scheduled, or advanced in a cadence',
        examples=[1],
    )
    target_daily_people: Optional[int] = Field(
        None,
        description='The user defined target for number of people to add to the cadence each day',
        examples=[10],
    )


class CadenceExport(BaseModel):
    cadence_content: Optional[Dict[str, Any]] = Field(
        None, description='The content of the cadence', examples=[{}]
    )


class CadenceMembershipCounts(BaseModel):
    bounces: Optional[int] = Field(
        None,
        description='The number of times emails sent from the cadence to the person bounced',
        examples=[0],
    )
    calls: Optional[int] = Field(
        None,
        description='The number of times a call was logged from the cadence to the person',
        examples=[2],
    )
    clicks: Optional[int] = Field(
        None,
        description='The number of times emails sent from the cadence to the person were clicked',
        examples=[5],
    )
    replies: Optional[int] = Field(
        None,
        description='The number of times emails sent from the cadence to the person were replied to',
        examples=[2],
    )
    sent_emails: Optional[int] = Field(
        None,
        description='The number of times emails were sent from the cadence to the person',
        examples=[4],
    )
    views: Optional[int] = Field(
        None,
        description='The number of times emails sent from the cadence to the person were opened',
        examples=[10],
    )


class CalendarEvent(BaseModel):
    all_day: Optional[str] = Field(
        None,
        description='Whether the calendar event is an all-day event.',
        examples=[False],
    )
    attendees: Optional[Dict[str, Any]] = Field(
        None,
        description='The attendees of the calendar event.',
        examples=[
            [
                {
                    'deleted_at': None,
                    'email': 'alice@example.com',
                    'name': 'Alice',
                    'organizer': True,
                    'status': 'accepted',
                    'status_changed': False,
                },
                {
                    'deleted_at': None,
                    'email': 'bob@example.com',
                    'name': 'Bob',
                    'organizer': False,
                    'status': 'accepted',
                    'status_changed': False,
                },
            ]
        ],
    )
    body_html: Optional[str] = Field(
        None,
        description='Raw body content from Microsoft calendar events',
        examples=['some html text'],
    )
    busy: Optional[bool] = Field(
        None, description='Busy/free status of the calendar event', examples=[False]
    )
    calendar_id: Optional[str] = Field(
        None,
        description='Calendar ID of the user calendar.',
        examples=['test@example.com'],
    )
    canceled_at: Optional[str] = Field(
        None,
        description='The canceled date of the calendar event.',
        examples=['iso8601_now'],
    )
    conference_data: Optional[Dict[str, Any]] = Field(
        None,
        description='The conference-related information, such as details of a Google Meet conference.',
        examples=[{}],
    )
    created_at: Optional[str] = Field(
        None,
        description='Creation time of the calendar event.',
        examples=['iso8601_now'],
    )
    creator: Optional[Dict[str, Any]] = Field(
        None,
        description='The creator email of the calendar event.',
        examples=['creator@example.com'],
    )
    description: Optional[str] = Field(
        None,
        description='Description of the calendar event',
        examples=['Calendar event description'],
    )
    end_time: Optional[datetime] = Field(
        None,
        description='The (exclusive) end time of the calendar event.',
        examples=['2022-08-23T08:18:47.853983Z'],
    )
    extended_properties: Optional[Dict[str, Any]] = Field(
        None, description='Extended properties of the calendar event.', examples=[{}]
    )
    html_link: Optional[str] = Field(
        None,
        description='An absolute link to this calendar event in the Google Calendar Web UI.',
        examples=['https://www.google.com/calendar/event?eid=Y2N'],
    )
    i_cal_uid: Optional[str] = Field(
        None,
        description='Calendar event unique identifier (iCalUID)',
        examples=['1p1oilmc4mt3m6ah6rmf6ik8mm@google.com'],
    )
    id: Optional[str] = Field(
        None,
        description='The calendar event original ID from calendar provider',
        examples=[
            'AAMkADQ0NjE4YmY5LTc3ZDYtNDc5NC1-UlgAAAAAAENAAB3eGoN5TIDTp8dXXDpxUlgAACQlfLuAAA='
        ],
    )
    location: Optional[str] = Field(
        None, description='Location of the calendar event', examples=['Event location']
    )
    organizer: Optional[str] = Field(
        None,
        description='The organizer email of the calendar event.',
        examples=['organizer@example.com'],
    )
    provider: Optional[str] = Field(
        None, description='The provider of the calendar event.', examples=['google']
    )
    recurring: Optional[str] = Field(
        None,
        description='Whether the calendar event is a recurring event.',
        examples=[False],
    )
    start_time: Optional[datetime] = Field(
        None,
        description='The (inclusive) start time of the calendar event.',
        examples=['2022-08-23T08:18:47.832113Z'],
    )
    status: Optional[str] = Field(
        None,
        description='The status of the calendar event. It can be empty for non-google events.',
        examples=['confirmed'],
    )
    tenant_id: Optional[int] = Field(
        None, description='Tenant ID of the user calendar', examples=[1]
    )
    title: Optional[str] = Field(
        None,
        description='Title of the calendar event',
        examples=['Calendar event title'],
    )
    updated_at: Optional[str] = Field(
        None,
        description='Last modification time of the calendar event.',
        examples=['iso8601_now'],
    )
    user_guid: Optional[str] = Field(
        None,
        description='User GUID of the user calendar.',
        examples=['9ccb7701-52e7-4d3e-91b0-b142a2fef2ec'],
    )


class CallDisposition(BaseModel):
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the call disposition was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    id: Optional[int] = Field(None, description='ID of CallDisposition', examples=[1])
    name: Optional[str] = Field(
        None, description='An available call disposition text', examples=['Connected']
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the call disposition was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )


class CallInstruction(BaseModel):
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the call instructions were created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    id: Optional[int] = Field(None, description='ID of call instructions', examples=[1])
    instructions: Optional[str] = Field(
        None,
        description='The instructions',
        examples=[
            'Call once, leave voicemail if not answered. Conference conversation.'
        ],
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the call instructions were last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )


class CallSentiment(BaseModel):
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the call sentiment was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    id: Optional[int] = Field(None, description='ID of CallSentiment', examples=[1])
    name: Optional[str] = Field(
        None, description='An available call sentiment text', examples=['Interested']
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the call sentiment was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )


class ConversationsCall(BaseModel):
    call_created_at: Optional[str] = Field(
        None,
        description='Timestamp for when the call started. If not provided, will default to the time the request was received',
        examples=['2022-07-22 01:00:00'],
    )
    direction: Optional[str] = Field(
        None, description='Call direction', examples=['Outbound']
    )
    duration: Optional[float] = Field(
        None, description='Duration of call in seconds', examples=[120]
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Phone number that call was made from',
        examples=['123-456-7890'],
    )
    recording: Optional[Dict[str, Any]] = Field(
        None,
        description='Object containing recording info including the audio file (.mp3, .wav, .ogg, .m4a)',
        examples=[{'url': 'www.example.com/audio.mp3'}],
    )
    to: Optional[str] = Field(
        None, description='Phone number that was called', examples=['123-456-7890']
    )
    user_guid: Optional[str] = Field(
        None,
        description='Guid of the Salesloft User to assign the call to. If not provided, will default to the user within the authentication token',
        examples=['aa111111-11aa-1111-a1a1-11aa11a1a1a1'],
    )


class CrmActivityField(BaseModel):
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the CrmActivityField was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    crm_object_type: Optional[str] = Field(
        None,
        description='The CRM object type that this field maps to. Valid object types are CRM dependent: Task, Phonecall, Email.\n',
        examples=['Task'],
    )
    field: Optional[str] = Field(
        None, description='The CRM field name', examples=['orgName__Field_Name__c']
    )
    field_type: Optional[str] = Field(
        None,
        description='The type of this field in your CRM. Certain field types can only accept structured input.',
        examples=['boolean'],
    )
    id: Optional[int] = Field(None, description='ID of CrmActivityField', examples=[1])
    picklist_values: Optional[Dict[str, Any]] = Field(
        None,
        description='Valid picklist values, if present for this field. The format is {label => value}. If present, only\nvalues in the picklist structure can be used as a crm param.\n',
        examples=[{'High': 'High', 'Low': 'Low'}],
    )
    salesforce_object_type: Optional[str] = Field(
        None,
        description='The Salesforce object type that this field maps to. Valid object types are: Task.\nMore object types may be added in the future.\n',
        examples=['Task'],
    )
    source: Optional[str] = Field(
        None,
        description='SalesLoft object that this field is mapped for. Valid sources are: email, phone',
        examples=['phone'],
    )
    title: Optional[str] = Field(
        None,
        description='A human friendly title for this field',
        examples=['Field Name'],
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the CrmActivityField was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    value: Optional[str] = Field(
        None,
        description="A value to always be written. This value does not need to be sent to other endpoints' crm params,\nbut must be the exact value if sent. Email source fields will always have a value present.\n",
        examples=['Email'],
    )


class CustomField(BaseModel):
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Custom Field was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    field_type: Optional[str] = Field(
        None,
        description='Type of the Custom Field. Value must be one of: person, company, opportunity.',
        examples=['person'],
    )
    id: Optional[int] = Field(None, description='ID of Custom Field', examples=[1])
    name: Optional[str] = Field(
        None, description='Name of the Custom Field', examples=['My Custom Field']
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Custom Field was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    value_type: Optional[str] = Field(
        None,
        description='Value Type of the Custom Field. Value must be one of: text, date.',
        examples=['text'],
    )


class EmailCounts(BaseModel):
    attachments: Optional[int] = Field(
        None, description='The number of attachments on the email', examples=[0]
    )
    clicks: Optional[int] = Field(
        None,
        description='The number of times links in the email were clicked',
        examples=[2],
    )
    replies: Optional[int] = Field(
        None, description='The number of replies the email received', examples=[1]
    )
    unique_devices: Optional[int] = Field(
        None,
        description='The number of unique devices that opened the email',
        examples=[4],
    )
    unique_locations: Optional[int] = Field(
        None,
        description='The number of unique locations that opened the email',
        examples=[3],
    )
    views: Optional[int] = Field(
        None, description='The number of times the email was opened', examples=[3]
    )


class EmailTemplateCounts(BaseModel):
    bounces: Optional[int] = Field(
        None,
        description='The number of bounces the email template received',
        examples=[10],
    )
    clicks: Optional[int] = Field(
        None,
        description='The number of times links in the email template were clicked',
        examples=[20],
    )
    replies: Optional[int] = Field(
        None,
        description='The number of replies the email template received',
        examples=[1],
    )
    sent_emails: Optional[int] = Field(
        None,
        description='The number of times the email template was sent out',
        examples=[59],
    )
    views: Optional[int] = Field(
        None,
        description='The number of times the email template was opened',
        examples=[3],
    )


class EmbeddedAccountCounts(BaseModel):
    people: Optional[int] = Field(
        None,
        description='Number of people in SalesLoft associated with this Account',
        examples=[15],
    )


class EmbeddedAttendeeResource(BaseModel):
    deleted_at: Optional[date] = Field(
        None,
        description='Datetime of when the attendee was deleted',
        examples=['2022-12-19T16:49:17.930926+02:00'],
    )
    email: Optional[str] = Field(
        None, description='Email of the attendee', examples=['calendar@example.com']
    )
    name: Optional[str] = Field(
        None, description='Name of the attendee', examples=['John']
    )
    organizer: Optional[bool] = Field(
        None,
        description='Whether the attendee is the organizer of the event.',
        examples=[False],
    )
    status: Optional[str] = Field(
        None,
        description="The attendee's response status. Possible values are: needsAction, accepted, tentative, declined",
        examples=['accepted'],
    )
    status_changed: Optional[bool] = Field(
        None,
        description='Whether the attendee changed response status',
        examples=[False],
    )


class EmbeddedRecordingResource(BaseModel):
    recording_status: Optional[str] = Field(
        None,
        description='The processing status of the recording. Possible values are (but not limited to):\n\nnot_recorded: there is no recording available, and there will not be one becoming available\n\npending: the recording is currently being processed by the system\n\nprocessing: the recording is currently being processed by the system\n\ncompleted: the recording processing has been completed\n',
        examples=['completed'],
    )
    status: Optional[str] = Field(
        None,
        description='The status of the call that produced this recording. Possible values are (but not limited to):\n\nno-answer: The call was not answered\n\nfailed: The call was not able to be placed\n\nbusy: The call was busy\n\nringing: The call is ringing\n\nin-progress: The call is ongoing\n\ncompleted: The call is finished\n',
        examples=['completed'],
    )
    url: Optional[str] = Field(
        None,
        description='The url of the recording',
        examples=['http://example.com/recording/1'],
    )


class EmbeddedResource(BaseModel):
    field_href: Optional[str] = Field(
        None,
        alias='_href',
        description='Resource URL, pointed at your API version, present if this resource is available in the API',
        examples=['https://api.salesloft.com/v2/widgets/10'],
    )
    id: Optional[int] = Field(None, description='ID of the resource', examples=[10])


class EventMeetingSetting(BaseModel):
    email_address: Optional[str] = Field(
        None,
        description="Calendar owner's email address",
        examples=['calendar.owner@example.com'],
    )


class ExternalEmail(BaseModel):
    message_id: Optional[str] = Field(
        None,
        description='Message id present in the External Email header',
        examples=[
            'CAKseEdbTMcU-U0CeTkUSo5X4jyW8QPReVTyPA6CrUCf0ggZwHQ@mail.salesloft.com'
        ],
    )


class Group(BaseModel):
    accessible_groups: Optional[List[EmbeddedResource]] = Field(
        None,
        description='Groups accessible if any',
        examples=[[{'_href': 'https://api.salesloft.com/v2/groups/921', 'id': 921}]],
    )
    id: Optional[int] = Field(None, description='ID of the Group', examples=[1])
    name: Optional[str] = Field(
        None, description='Name of the Group', examples=['Test name']
    )
    parent_id: Optional[int] = Field(
        None, description='ID of the parent Group', examples=[2]
    )


class Import(BaseModel):
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the import was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    current_people_count: Optional[int] = Field(
        None, description='Count of People that have not been deleted', examples=[5]
    )
    id: Optional[int] = Field(None, description='Import ID', examples=[1])
    imported_people_count: Optional[int] = Field(
        None,
        description='Count of People that have ever been on this Import',
        examples=[7],
    )
    name: Optional[str] = Field(
        None,
        description='Name of Import',
        examples=['DataProvider -> SalesLoft 9/1/17'],
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the import was last updated, ignoring relationship changes',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )


class JobData(BaseModel):
    bulk_job: Optional[Dict[str, Any]] = Field(
        None,
        description='Associated bulk job',
        examples=['{"id": 123, "_href": "https://api.salesloft.com/v2/bulk_jobs/123"'],
    )
    created_at: Optional[datetime] = Field(
        None,
        description='When this job data record was created',
        examples=['2019-01-01T00:00:00-05:00'],
    )
    error: Optional[str] = Field(
        None, description='Error associated with this record', examples=['Not found']
    )
    finished_at: Optional[datetime] = Field(
        None,
        description='When this job data record finished processing',
        examples=['2019-01-01T00:00:00-05:00'],
    )
    id: Optional[int] = Field(None, description='ID of this Job Data', examples=[1])
    record: Optional[Dict[str, Any]] = Field(
        None,
        description='The data that was used to process the operation',
        examples=['{first_name: "John", last_name: "Smith"}'],
    )
    resource: Optional[Dict[str, Any]] = Field(
        None,
        description='The object containing the resulting resource from performing the bulk action on this record',
        examples=['{person: {...}, upsert_type: "create"}'],
    )
    started_at: Optional[datetime] = Field(
        None,
        description='When this job data record started processing',
        examples=['2019-01-01T00:00:00-05:00'],
    )
    status: Optional[str] = Field(
        None,
        description='Status of this job data. Must be one of: pending, success, error, retrying',
        examples=['success'],
    )


class JobDataCreationResult(BaseModel):
    records: Optional[int] = Field(
        None, description='Number of records created', examples=[100]
    )


class LiveFeedItem(BaseModel):
    alert_metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Information about whether this event should trigger an alert',
        examples=[
            {'should_alert': True, 'should_alert_until': '2019-01-01T00:00:00-05:00'}
        ],
    )
    event_occurred_at: Optional[datetime] = Field(
        None,
        description='When this event occurred',
        examples=['2019-01-01T00:00:00-05:00'],
    )
    event_type: Optional[str] = Field(
        None, description='The type of event', examples=['email_click']
    )
    id: Optional[int] = Field(None, description='ID of this item', examples=[1])
    message: Optional[str] = Field(
        None,
        description='A plaintext message for this event',
        examples=['Steve is visiting your website.'],
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='The metadata created for this event',
        examples=[
            {
                'email_id': 2,
                'email_subject': 'Come join us at Rainmaker, Jon!',
                'mailing_id': 3,
                'person_id': 1,
            }
        ],
    )
    path: Optional[str] = Field(
        None,
        description='The path to the application that should be followed',
        examples=['/app/emails/detail/1'],
    )
    rollup_key: Optional[str] = Field(
        None,
        description='The key that should be used to rollup events client side. null or empty values should not be rolled up',
        examples=['email_click:10'],
    )
    title: Optional[str] = Field(
        None, description='A plaintext title for this event', examples=['Website Visit']
    )
    user_guid: Optional[str] = Field(
        None,
        description='UUID of the user this item is for',
        examples=['51398ccd-309e-467f-aae2-4b0f66b5c11d'],
    )


class LiveWebsiteTrackingParameter(BaseModel):
    parameters: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A SalesLoft identifier',
        examples=[[{'name': 'sbrc', 'value': 'tracking parameter'}]],
    )


class Meeting(BaseModel):
    account_id: Optional[str] = Field(
        None,
        description='ID of the account the recipient associated to',
        examples=['1'],
    )
    all_day: Optional[bool] = Field(
        None, description='Whether the meeting is an all-day meeting', examples=[False]
    )
    attendees: Optional[List[EmbeddedAttendeeResource]] = Field(
        None,
        description='The attendees of the meeting. Each attendee includes the following fields: status, email, name, organizer',
        examples=[
            [
                {
                    'deleted_at': None,
                    'email': 'john@example.com',
                    'name': 'John',
                    'organizer': True,
                    'status': 'accepted',
                }
            ]
        ],
    )
    booked_by_meetings_settings: Optional[EventMeetingSetting] = None
    booked_by_user: Optional[EmbeddedResource] = None
    cadence: Optional[EmbeddedResource] = None
    calendar_id: Optional[str] = Field(
        None,
        description='Calendar ID of the meeting owner',
        examples=['calendar-id-google.com'],
    )
    calendar_type: Optional[str] = Field(
        None,
        description='Calendar type of the meeting owner. Possible values are: gmail, azure, nylas, linkedin_azure, cerebro, external',
        examples=['gmail'],
    )
    canceled_at: Optional[date] = Field(
        None,
        description='Datetime of when the meeting was canceled',
        examples=['2022-12-19T16:49:17.931396+02:00'],
    )
    created_at: Optional[date] = Field(
        None,
        description='Datetime of when the meeting was created',
        examples=['2022-12-19T16:49:17.930298+02:00'],
    )
    crm_custom_fields: Optional[Dict[str, Any]] = Field(
        None,
        description='List of crm custom fields which will be logged to SFDC',
        examples=[{'Event_Calendar_Type__c': 'Google'}],
    )
    crm_references: Optional[Dict[str, Any]] = Field(
        None,
        description='List of crm references associated with the meeting',
        examples=[
            {
                'what': {
                    'crm_id': '0063X000018fDmMQAU',
                    'crm_object_label': 'Opportunity',
                    'crm_object_type': 'Opportunity',
                    'crm_url': 'link_to_salesforce',
                    'description1': 'Title of the opportunity',
                    'description2': '2032-01-10',
                    'description3': 'Prospecting',
                },
                'who': {
                    'crm_id': '0033X00004GOywtQAD',
                    'crm_object_label': 'Contact',
                    'crm_object_type': 'Contact',
                    'crm_url': 'link_to_salesforce',
                    'description1': 'John Doe',
                    'description2': 'john.doe@example.com',
                    'description3': None,
                },
            }
        ],
    )
    description: Optional[str] = Field(
        None,
        description='Description of the meeting',
        examples=['Introducing interview'],
    )
    end_time: Optional[date] = Field(
        None,
        description='End time of the meeting',
        examples=['2022-12-19T16:49:17.917861+02:00'],
    )
    event_id: Optional[str] = Field(
        None,
        description='ID of the meeting created by target calendar',
        examples=['123468796'],
    )
    event_source: Optional[str] = Field(
        None,
        description="Source of the meeting. Possible values are: 'external' - The event was synced to Salesloft platform via Calendar Sync, 'internal' - The event was created via Salesloft platform",
        examples=['external'],
    )
    guests: Optional[List[str]] = Field(
        None,
        description='The list of attendees emails of the meeting',
        examples=[['email1@sloft.com', 'email2@sloft.com']],
    )
    i_cal_uid: Optional[str] = Field(
        None,
        description='UID of the meeting provided by target calendar provider',
        examples=['040P00B08200E00074C5B7101A82EF'],
    )
    id: Optional[int] = Field(None, description='ID of the meeting', examples=[1])
    location: Optional[str] = Field(
        None, description='Location of the meeting', examples=['Atlanta, GA']
    )
    meeting_type: Optional[str] = Field(
        None, description='Meeting type', examples=['Demo call']
    )
    no_show: Optional[bool] = Field(
        None, description='Whether the meeting is a No Show meeting', examples=[False]
    )
    owned_by_meetings_settings: Optional[EventMeetingSetting] = None
    person: Optional[EmbeddedResource] = None
    recipient_email: Optional[str] = Field(
        None,
        description='Email of the meeting invite recipient',
        examples=['email@sloft.com'],
    )
    recipient_name: Optional[str] = Field(
        None, description='Name of the meeting invite recipient', examples=['John Doe']
    )
    start_time: Optional[date] = Field(
        None,
        description='Start time of the meeting',
        examples=['2022-12-19T16:49:17.917818+02:00'],
    )
    status: Optional[str] = Field(
        None,
        description='Status of the meeting. Possible values are: pending, booked, failed, retry',
        examples=['booked'],
    )
    step: Optional[EmbeddedResource] = None
    strict_attribution: Optional[bool] = Field(
        None,
        description='Strict attribution means that we 100% sure which cadence generate the meeting',
        examples=[False],
    )
    task_id: Optional[str] = Field(
        None, description='ID of the created task', examples=['123']
    )
    title: Optional[str] = Field(
        None, description='Title of the meeting', examples=['Meeting with John']
    )
    updated_at: Optional[date] = Field(
        None,
        description='Datetime of when the meeting was last updated',
        examples=['2022-12-19T16:49:17.930340+02:00'],
    )


class MeetingUrl(BaseModel):
    created_at: Optional[date] = Field(
        None,
        description='Datetime of when MeetingUrl was created',
        examples=['2022-09-15T11:40:59.056237+03:00'],
    )
    updated_at: Optional[date] = Field(
        None,
        description='Datetime of when MeetingUrl was last updated',
        examples=['2022-09-15T11:40:59.056272+03:00'],
    )
    url: Optional[str] = Field(
        None,
        description='Full url of the meeting',
        examples=['https://example.com/team/user'],
    )


class MimeEmailPayload(BaseModel):
    id: Optional[int] = Field(None, description='Email ID', examples=[1])
    mailbox: Optional[str] = Field(
        None,
        description="Email Address of Sender's mailbox",
        examples=['example@salesloft.com'],
    )
    message_id: Optional[str] = Field(
        None,
        description='Unique Message ID',
        examples=[
            'CAKseEdbTMcU-U0CeTkUSo5X4jyW8QPReVTyPA6CrUCf0ggZwHQ@mail.salesloft.com'
        ],
    )
    raw: Optional[str] = Field(
        None,
        description='Base64 encoded MIME email content',
        examples=['ZW1haWwgZXhhbXBsZQ==\n'],
    )


class Note(BaseModel):
    associated_type: Optional[str] = Field(
        None,
        description="Type of associated resource ('person' or 'account')",
        examples=['person'],
    )
    associated_with: Optional[EmbeddedResource] = None
    call: Optional[EmbeddedResource] = None
    content: Optional[str] = Field(
        None,
        description='The content of the note',
        examples=['Was very interested in a demo at a later time'],
    )
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the note was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    id: Optional[int] = Field(None, description='Note ID', examples=[1])
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the note was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    user: Optional[EmbeddedResource] = None


class PendingEmail(BaseModel):
    id: Optional[int] = Field(None, description='ID of the email', examples=[1])
    mailbox: Optional[str] = Field(
        None,
        description='Email Address of the pending email',
        examples=['example@salesloft.com'],
    )
    mime_email_payload: Optional[EmbeddedResource] = None


class PersonCounts(BaseModel):
    calls: Optional[int] = Field(
        None, description='The number of calls logged to this person', examples=[4]
    )
    emails_bounced: Optional[int] = Field(
        None,
        description='The number of unique emails sent to this person that bounced',
        examples=[0],
    )
    emails_clicked: Optional[int] = Field(
        None,
        description='The number of unique emails clicked by this person',
        examples=[1],
    )
    emails_replied_to: Optional[int] = Field(
        None,
        description='The number of unique emails replied to by this person',
        examples=[0],
    )
    emails_sent: Optional[int] = Field(
        None, description='The number of emails sent to this person', examples=[3]
    )
    emails_viewed: Optional[int] = Field(
        None,
        description='The number of unique emails viewed by this person',
        examples=[2],
    )


class PersonStage(BaseModel):
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Person Stage was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    id: Optional[int] = Field(None, description='ID of Person Stage', examples=[1])
    name: Optional[str] = Field(
        None, description='Name of Person Stage', examples=['Entry Stage']
    )
    order: Optional[int] = Field(
        None, description='Sortable value of Person Stage order', examples=[16]
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Person Stage was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )


class PhoneNumberAssignment(BaseModel):
    id: Optional[int] = Field(
        None, description='PhoneNumberAssignment ID', examples=[1]
    )
    number: Optional[str] = Field(
        None,
        description='The phone number associated with this assignment',
        examples=['+12223334444'],
    )
    user: Optional[EmbeddedResource] = None


class RecordingSetting(BaseModel):
    recording_default: Optional[bool] = Field(
        None,
        description='Whether this phone number should record by default',
        examples=[True],
    )


class SavedListView(BaseModel):
    id: Optional[int] = Field(None, description='ID of Ssaved list view', examples=[1])
    is_default: Optional[bool] = Field(
        None,
        description='Whether the saved list view is the default view',
        examples=[True],
    )
    name: Optional[str] = Field(
        None, description='Name of saved list view', examples=["Tom's Prospects"]
    )
    view: Optional[str] = Field(
        None, description='Type of saved list view', examples=['companies']
    )
    view_params: Optional[Dict[str, Any]] = Field(
        None,
        description='List of set filters in saved list view',
        examples=[{'owner': 'unowned', 'stage': '28865', 'unowned': True}],
    )


class Step(BaseModel):
    cadence: Optional[EmbeddedResource] = None
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Step was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    day: Optional[int] = Field(
        None, description='Day this step is associated with up', examples=[1]
    )
    details: Optional[EmbeddedResource] = None
    disabled: Optional[bool] = Field(
        None, description='Whether this step is currently active', examples=[True]
    )
    display_name: Optional[str] = Field(
        None, description='Display name of the step', examples=['Day 1: Step 2 - Phone']
    )
    id: Optional[int] = Field(None, description='ID of Step', examples=[1])
    multitouch_enabled: Optional[bool] = Field(
        None,
        description='Whether this step is a multitouch cadence step',
        examples=[False],
    )
    name: Optional[str] = Field(
        None, description='Name of the step', examples=['VP Email Short']
    )
    step_number: Optional[int] = Field(
        None, description='The number of the step for this day', examples=[1]
    )
    type: Optional[str] = Field(
        None,
        description='The type of the action scheduled by this step. Valid types are: email, phone, integration, other. New types may be added in the future.\n',
        examples=['phone'],
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Step was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )


class Subscription(BaseModel):
    callback_token: Optional[str] = Field(
        None,
        description='SalesLoft will include this token in the webhook event payload when calling your callback_url. It is strongly encouraged for your handler to verify this value in order to ensure the request came from SalesLoft.',
        examples=['xT7/Buu0Vz2ffiIPuMlBGu+cwku1dr7G5jeiM0iyfYIT0l4z3azNGjiXWTOX/8OT'],
    )
    callback_url: Optional[str] = Field(
        None,
        description='URL for your callback handler',
        examples=['https://mycompany.com/api/person_called_handler'],
    )
    enabled: Optional[bool] = Field(
        None, description='Is the Webhook Subscription enabled or not', examples=[True]
    )
    event_type: Optional[str] = Field(
        None,
        description='Type of event the subscription is for',
        examples=['link_swap'],
    )
    id: Optional[int] = Field(
        None, description='ID for the Webhook Subscription', examples=[1]
    )
    tenant_id: Optional[int] = Field(
        None, description='ID for the tenant to which user is assigned', examples=[16]
    )
    user_guid: Optional[str] = Field(
        None,
        description='UUID of the user the token is associated with',
        examples=['51398ccd-309e-467f-aae2-4b0f66b5c11d'],
    )


class SuccessCounts(BaseModel):
    total_calls: Optional[int] = Field(
        None,
        description='The total number of calls made in this success window',
        examples=[5],
    )
    total_emails: Optional[int] = Field(
        None,
        description='The total number of emails made in this success window',
        examples=[2],
    )
    total_other_touches: Optional[int] = Field(
        None,
        description='The total number of other touches made in this success window',
        examples=[3],
    )


class Tag(BaseModel):
    id: Optional[int] = Field(None, description='ID of Tag', examples=[1])
    name: Optional[str] = Field(
        None, description='Name of the tag', examples=['marketing']
    )


class Task(BaseModel):
    completed_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the task was completed, ISO-8601 datetime format required',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    completed_by: Optional[EmbeddedResource] = None
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Task was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    created_by_user: Optional[EmbeddedResource] = None
    current_state: Optional[str] = Field(
        None,
        description='The state of the task. Valid states are: scheduled, completed',
        examples=['scheduled'],
    )
    description: Optional[str] = Field(
        None,
        description='A description of the task recorded for person at completion time',
        examples=['Ask John Wick about his dog.'],
    )
    due_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Task is due, can be null.  ISO-8601 datetime format required',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    due_date: Optional[date] = Field(
        None,
        description='Date of when the Task is due, ISO-8601 date format required',
        examples=['2024-01-01'],
    )
    id: Optional[int] = Field(None, description='ID of Task', examples=[1])
    person: Optional[EmbeddedResource] = None
    remind_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the user will be reminded of the task, ISO-8601 datetime format required',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    subject: Optional[str] = Field(
        None, description='Subject line of the task', examples=['Call John Wick']
    )
    task_type: Optional[str] = Field(
        None,
        description='The type of the task.  Valid types are: call, email, general',
        examples=['call'],
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Task was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    user: Optional[EmbeddedResource] = None


class Team(BaseModel):
    field_private_fields: Optional[Dict[str, Any]] = Field(
        None,
        alias='_private_fields',
        description='For internal use only. This field does not comply with our backwards compatability policies.',
        examples=[{}],
    )
    allow_automated_email_steps: Optional[bool] = Field(
        None,
        description='Whether team members are allowed to have automated email steps',
        examples=[True],
    )
    call_recording_disabled: Optional[bool] = Field(
        None, description='Whether all call recording is disabled', examples=[False]
    )
    click_tracking_default: Optional[bool] = Field(
        None,
        description='The team default for click tracking when composing emails',
        examples=[True],
    )
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the team was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    custom_tracking_domain: Optional[str] = Field(
        None,
        description='The domain click and open tracking will be proxied through',
        examples=['examplecompany.com'],
    )
    deactivated: Optional[bool] = Field(
        None, description='Indicates if the team has been deactivated', examples=[True]
    )
    dispositions_required: Optional[bool] = Field(
        None,
        description='Whether team members are required to mark disposition at the end of calls',
        examples=[False],
    )
    email_daily_limit: Optional[int] = Field(
        None,
        description='Daily email limit for each member on the team',
        examples=[1000],
    )
    group_privacy_setting: Optional[str] = Field(
        None,
        description='Visibility setting for resources across the team. Possible values are: group_public, all_public.\nWhen the value is group_public, certain resources will only be visible to members of the same group.\nWhen the value is all_public, all resources are visible to all users on this team.\n',
        examples=['all_public'],
    )
    id: Optional[int] = Field(None, description='Team ID', examples=[1])
    license_limit: Optional[int] = Field(
        None, description='Count of seats that this team has licensed', examples=[100]
    )
    local_dial_enabled: Optional[bool] = Field(
        None, description='Whether this team has local dial enabled', examples=[True]
    )
    name: Optional[str] = Field(None, description='Team name', examples=['The A-Team'])
    plan: Optional[str] = Field(
        None,
        description='Plan type of the team, Possible values are: group, professional, enterprise',
        examples=['professional'],
    )
    plan_features: Optional[Dict[str, Any]] = Field(
        None,
        description='Add on features for this team',
        examples=[{'opportunity_management': 'Opportunity Management'}],
    )
    record_by_default: Optional[bool] = Field(
        None, description='Whether calls will record by default', examples=[True]
    )
    sentiments_required: Optional[bool] = Field(
        None,
        description='Whether team members are required to log sentiments',
        examples=[False],
    )
    team_visibility_default: Optional[str] = Field(
        None,
        description='The default visibility of resources on the team, in the UI only. The API does not utilize this default.\nPossible values are: public, private.\n',
        examples=['public'],
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the team was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )


class TeamTemplateAttachment(BaseModel):
    attachment_file_size: Optional[int] = Field(
        None, description='The size of the attachment', examples=[2]
    )
    attachment_id: Optional[int] = Field(
        None, description='ID of the team template attachment'
    )
    download_url: Optional[str] = Field(
        None,
        description='Download url of the attachment',
        examples=['https://path/to/example_attachment.gif'],
    )
    id: Optional[int] = Field(
        None, description='ID of team template attachment association', examples=[5]
    )
    name: Optional[str] = Field(
        None, description='Name of the attachment', examples=['example_attachment.gif']
    )
    team_template: Optional[EmbeddedResource] = None


class TeamTemplateCounts(BaseModel):
    bounces: Optional[int] = Field(
        None,
        description='The number of bounces the team template received',
        examples=[10],
    )
    clicks: Optional[int] = Field(
        None,
        description='The number of times links in the team template were clicked',
        examples=[20],
    )
    replies: Optional[int] = Field(
        None,
        description='The number of replies the team template received',
        examples=[1],
    )
    sent_emails: Optional[int] = Field(
        None,
        description='The number of times the team template was sent out',
        examples=[59],
    )
    views: Optional[int] = Field(
        None,
        description='The number of times the team template was opened',
        examples=[3],
    )


class User(BaseModel):
    field_private_fields: Optional[Dict[str, Any]] = Field(
        None,
        alias='_private_fields',
        description='For internal use only. This field does not comply with our backwards compatability policies.',
        examples=[{}],
    )
    active: Optional[bool] = Field(
        None,
        description='Whether an user is currently active in SalesLoft',
        examples=[True],
    )
    bcc_email_address: Optional[str] = Field(
        None,
        description="Address that will be BBC'd on all emails from this user",
        examples=['fake@salesloft.com'],
    )
    click_to_call_enabled: Optional[bool] = Field(
        None, description='Whether this user has click to call enabled', examples=[True]
    )
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the user was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    crm_connected: Optional[bool] = Field(
        None, description='Whether the user has a crm connected', examples=[True]
    )
    email: Optional[str] = Field(
        None,
        description='Email address provided to accounts.salesloft.com',
        examples=['fake@salesloft.com'],
    )
    email_client_configured: Optional[bool] = Field(
        None,
        description='Whether this user has a email client configured',
        examples=[True],
    )
    email_client_email_address: Optional[str] = Field(
        None,
        description='Email address associated with the email client of the user',
        examples=['fake@salesloft.com'],
    )
    email_signature: Optional[str] = Field(
        None,
        description='Email signature',
        examples=['Benjamin Franklin<div></div><div></div>'],
    )
    email_signature_click_tracking_disabled: Optional[bool] = Field(
        None,
        description='Whether this user has click tracking disabled in email signature',
        examples=[False],
    )
    email_signature_type: Optional[str] = Field(
        None, description='Email signature type', examples=['html']
    )
    external_feature_flags: Optional[Dict[str, Any]] = Field(
        None,
        description='Feature flags that are for this user. New flags may appear or disappear at any time',
        examples=[{}],
    )
    first_name: Optional[str] = Field(
        None, description='First name of user', examples=['Benjamin']
    )
    from_address: Optional[str] = Field(
        None,
        description='The from address of this user',
        examples=['fake@salesloft.com'],
    )
    full_email_address: Optional[str] = Field(
        None,
        description='RFC 5322 compliant email address',
        examples=['"Benjamin Franklin" <Benjamin@salesloft.com>'],
    )
    group: Optional[EmbeddedResource] = None
    guid: Optional[str] = Field(
        None,
        description='Globally unique user ID. New endpoints will explicitly accept this over id',
        examples=['9cc6da15-d403-4f5b-aeed-c4b8463cf9ae'],
    )
    id: Optional[int] = Field(None, description='User ID', examples=[1])
    job_role: Optional[str] = Field(
        None, description='Job role of user', examples=['SDR / BDR']
    )
    last_name: Optional[str] = Field(
        None, description='Last name of user', examples=['Franklin']
    )
    local_dial_enabled: Optional[bool] = Field(
        None, description='Whether this user has Local Dial enabled', examples=[True]
    )
    name: Optional[str] = Field(
        None, description='Display name of user', examples=['Benjamin Franklin']
    )
    phone_client: Optional[EmbeddedResource] = None
    phone_number_assignment: Optional[EmbeddedResource] = None
    role: Optional[EmbeddedResource] = None
    sending_email_address: Optional[str] = Field(
        None,
        description='The email address that email of the user will be sent from, resolved in the following resolution order: from_user, email_client_email_address, email',
        examples=['fake@salesloft.com'],
    )
    slack_username: Optional[str] = Field(
        None, description='Slack username', examples=['benjamin-franklin']
    )
    team: Optional[EmbeddedResource] = None
    team_admin: Optional[bool] = Field(None, description='Team Admin', examples=[True])
    time_zone: Optional[str] = Field(
        None, description='User Time Zone', examples=['US/Eastern']
    )
    twitter_handle: Optional[str] = Field(
        None, description='Twitter handle', examples=['@benjamin-franklin']
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the user was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    work_country: Optional[str] = Field(
        None, description='Work Country', examples=['PE']
    )


class Ids(RootModel[List[int]]):
    root: List[int]


class UpdatedAt(RootModel[List[str]]):
    root: List[str]


class Name(RootModel[List[str]]):
    root: List[str]


class CrmId(RootModel[List[str]]):
    root: List[str]


class Tag1(RootModel[List[str]]):
    root: List[str]


class TagId(RootModel[List[int]]):
    root: List[int]


class CreatedAt(RootModel[List[str]]):
    root: List[str]


class Website(RootModel[List[str]]):
    root: List[str]


class AccountStageId(RootModel[List[int]]):
    root: List[int]


class AccountTierId(RootModel[List[int]]):
    root: List[int]


class OwnerId(RootModel[List[str]]):
    root: List[str]


class LastContacted(BaseModel):
    pass


class CustomFields(BaseModel):
    pass


class Industry(RootModel[List[str]]):
    root: List[str]


class Country(RootModel[List[str]]):
    root: List[str]


class State(RootModel[List[str]]):
    root: List[str]


class City(RootModel[List[str]]):
    root: List[str]


class OwnerCrmId(RootModel[List[str]]):
    root: List[str]


class Locales(RootModel[List[str]]):
    root: List[str]


class UserRelationships(BaseModel):
    pass


class DueOn(RootModel[List[str]]):
    root: List[str]


class UserGuid(RootModel[List[str]]):
    root: List[str]


class PersonId(RootModel[List[int]]):
    root: List[int]


class CadenceId(RootModel[List[int]]):
    root: List[int]


class MultitouchGroupId(RootModel[List[int]]):
    root: List[int]


class Sentiment(RootModel[List[str]]):
    root: List[str]


class Disposition(RootModel[List[str]]):
    root: List[str]


class CrmActivityId(RootModel[List[int]]):
    root: List[int]


class ActionId(RootModel[List[int]]):
    root: List[int]


class UserId(RootModel[List[int]]):
    root: List[int]


class Status(RootModel[List[str]]):
    root: List[str]


class StepId(RootModel[List[int]]):
    root: List[int]


class ScopedFields(RootModel[List[str]]):
    root: List[str]


class EmailAddresses(RootModel[List[str]]):
    root: List[str]


class Personalization(RootModel[List[str]]):
    root: List[str]


class SentAt(RootModel[List[str]]):
    root: List[str]


class OccurredAt(BaseModel):
    pass


class ResourceId(RootModel[List[str]]):
    root: List[str]


class UpdatedAt5(BaseModel):
    pass


class V2BulkJobsGetResponse(RootModel[List[BulkJob]]):
    root: List[BulkJob]


class Id(BaseModel):
    pass


class V2BulkJobsPostRequest(BaseModel):
    name: Optional[str] = Field(None, description='Name for your bulk job')
    type: str = Field(
        ...,
        description='Type of bulk job. Must be a valid type. Follow link to the bulk job details page above to view supported types.',
    )


class V2BulkJobsBulkJobsIdJobDataGetResponse(RootModel[List[BulkJobResult]]):
    root: List[BulkJobResult]


class V2BulkJobsBulkJobsIdJobDataPostRequest(BaseModel):
    data: List[str] = Field(
        ...,
        description='Array of objects containing parameters to be used to execute an instance of each. Array must be 5,000 records or less.',
    )


class V2BulkJobsBulkJobsIdResultsGetResponse(RootModel[List[BulkJobResult]]):
    root: List[BulkJobResult]


class V2BulkJobsIdPutRequest(BaseModel):
    name: Optional[str] = Field(None, description='Name for your bulk job')
    ready_to_execute: Optional[bool] = Field(
        None,
        description='Whether the job is ready to be executed. Must be true or false.',
    )


class UpdatedAt6(RootModel[List[str]]):
    root: List[str]


class OwnedByGuid(RootModel[List[str]]):
    root: List[str]


class V2CalendarEventsGetResponse(RootModel[List[CalendarEvent]]):
    root: List[CalendarEvent]


class V2CalendarEventsUpsertPostRequest(BaseModel):
    all_day: Optional[bool] = Field(
        None, description='Should be set to `true` for all day calendar events.'
    )
    attendees: Optional[Dict[str, Any]] = Field(
        None,
        description='  List of attendees of the calendar event.\n  Example:\n  ```\n    {\n      ...\n      "attendees": [\n        {\n          "name": "Alice",\n          "email": "alice@example.com",\n          "status": "accepted",\n          "organizer": true\n        },\n        {\n          "name": "Bob",\n          "email": "bob@example.com",\n          "status": "needsAction",\n          "organizer": false\n        }\n      ]\n    }\n  ```\n  `name`: full name of the attendee\n\n  `email`: email address of the attendee\n\n  `status`: one of the following - needsAction, accepted, tentative, declined\n\n  `organizer`: whether the attendee is the organizer of the calendar event\n',
    )
    calendar_id: str = Field(
        ...,
        description='  Calendar ID of the calendar event owner.\n  For the External Calendar connection use `external_{salesloft_user_guid}` format.\n  Example: `external_00210d1a-df8a-459f-af75-89b953b618b0`.\n',
    )
    canceled_at: Optional[str] = Field(
        None,
        description='  Cancellation time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.\n  Example: `2022-02-14T10:12:59+00:00`.\n',
    )
    description: Optional[str] = Field(
        None, description='Description of the calendar event'
    )
    end_time: date = Field(
        ...,
        description='  End time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.\n  Example: `2022-02-14T10:12:59+00:00`.\n',
    )
    i_cal_uid: str = Field(
        ...,
        description='  icalUID of the calendar event. Unique identifier for a calendar event across calendars.\n\n  Used as an upsert key.\n',
    )
    id: str = Field(
        ...,
        description='  Id of the calendar event, different for each occurrence in a recurring series.\n\n  Used as an upsert key.\n',
    )
    location: Optional[str] = Field(
        None, description='Location of the calendar event as free-form text.'
    )
    organizer: Optional[str] = Field(
        None, description='  Email address of the organizer\n'
    )
    recurring: Optional[bool] = Field(
        None,
        description='Should be set to `true` if this is one of recurring series calendar event.',
    )
    start_time: date = Field(
        ...,
        description='  Start time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.\n  Example: `2022-02-14T10:12:59+00:00`.\n',
    )
    status: Optional[str] = Field(
        None,
        description="  Status of the calendar event. Depending on the status, the calendar event will or will not impact user's availability.\n  Possible values: `confirmed`, `tentative`, `cancelled`.\n  Example: `confirmed`.\n",
    )
    title: Optional[str] = Field(None, description='Title of the calendar event')


class V2ConversationsCallsPostRequest(BaseModel):
    call_created_at: Optional[str] = Field(
        None,
        description='Timestamp for when the call started. If not provided, will default to the time the request was received',
    )
    direction: Optional[str] = Field(None, description='Call direction')
    duration: float = Field(..., description='Duration of call in seconds')
    from_: str = Field(
        ..., alias='from', description='Phone number that call was made from'
    )
    recording: Dict[str, Any] = Field(
        ...,
        description='Object containing recording info including the audio file (.mp3, .wav, .ogg, .m4a)',
    )
    to: str = Field(..., description=' Phone number that was called')
    user_guid: Optional[str] = Field(
        None,
        description='Guid of the Salesloft User to assign the call to. If not provided, will default to the user within the authentication token',
    )


class EmailTemplateId(RootModel[List[int]]):
    root: List[int]


class TagIds(RootModel[List[int]]):
    root: List[int]


class GroupId(RootModel[List[int]]):
    root: List[int]


class UserIds(RootModel[List[int]]):
    root: List[int]


class PersonIds(RootModel[List[int]]):
    root: List[int]


class EventIds(RootModel[List[int]]):
    root: List[int]


class ICalUids(RootModel[List[str]]):
    root: List[str]


class TaskIds(RootModel[List[int]]):
    root: List[int]


class StartTime(RootModel[List[str]]):
    root: List[str]


class UserGuids(RootModel[List[str]]):
    root: List[str]


class PersonStageId(RootModel[List[int]]):
    root: List[int]


class AccountId(RootModel[List[int]]):
    root: List[int]


class ImportId(RootModel[List[int]]):
    root: List[int]


class JobSeniority(RootModel[List[str]]):
    root: List[str]


class StarredByGuid(RootModel[List[str]]):
    root: List[str]


class Title(RootModel[List[str]]):
    root: List[str]


class CreatedAt3(BaseModel):
    pass


class OwnerId1(RootModel[List[int]]):
    root: List[int]


class CurrentState(RootModel[List[str]]):
    root: List[str]


class TaskType(RootModel[List[str]]):
    root: List[str]


class Locale(RootModel[List[str]]):
    root: List[str]


class TeamTemplateId(RootModel[List[int]]):
    root: List[int]


class Ids28(RootModel[List[str]]):
    root: List[str]


class V2ThirdPartyLiveFeedItemsPostRequest(BaseModel):
    event_occurred_at: str = Field(
        ...,
        description='Equality filters that are applied to the event_occurred_at field. A single filter can be used by itself or combined with other filters to create a range.\n---CUSTOM---\n{"keys":[{"description":"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"gt","type":"iso8601 string"},{"description":"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"gte","type":"iso8601 string"},{"description":"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"lt","type":"iso8601 string"},{"description":"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.","name":"lte","type":"iso8601 string"}],"type":"object"}\n',
    )
    idempotency_key: str = Field(
        ...,
        description="Uniquely provided string specific to this event. This should be a value which can't be duplicated between external systems, meaning that an id is not sufficient.",
    )
    message: str = Field(
        ...,
        description='The message that relates to the subject. This message should start with a lower-case past-tense verb and end with a period (e.g. "received a package."). When live feed items are displayed to users, the subject\'s name is concatenated with the message and a joining space. Only <a> HTML tags with an "href" attribute are allowed. Other attributes and tags will be stripped.',
    )
    subject_id: int = Field(
        ...,
        description='The ID of the subject of the live feed item (i.e. the "person" id).',
    )
    subject_type: str = Field(
        ...,
        description='The type of the subject of the live feed item. Currently only "person" is supported.',
    )
    user_guid: str = Field(
        ...,
        description='The guid for the user that this live feed item should be shown to.',
    )


class V2ThirdPartyLiveFeedItemsPostResponse(RootModel[List[LiveFeedItem]]):
    root: List[LiveFeedItem]


class Ids29(RootModel[List[int]]):
    root: List[int]


class Guid(RootModel[List[str]]):
    root: List[str]


class GroupId1(RootModel[List[str]]):
    root: List[str]


class RoleId(RootModel[List[str]]):
    root: List[str]


class WorkCountry(RootModel[List[str]]):
    root: List[str]


class V2WebhookSubscriptionsGetResponse(RootModel[List[Subscription]]):
    root: List[Subscription]


class V2WebhookSubscriptionsPostRequest(BaseModel):
    callback_token: str = Field(
        ...,
        description='Any string to be used as a shared secret when subscription events are published. SalesLoft will send the value of this callback_token in the payload of each event so the receiver may verify it matches the original value. This ensures webhook events are being delivered by SalesLoft.',
    )
    callback_url: str = Field(..., description='URL for your callback handler')
    event_type: str = Field(
        ...,
        description='Type of event the subscription is for. Visit the "Event Types" section of the webhooks page to find a list of supported event types.',
    )


class V2WebhookSubscriptionsIdPutRequest(BaseModel):
    enabled: Optional[bool] = Field(
        None, description='Enable or disable the webhook subscription'
    )


class Account(BaseModel):
    account_tier: Optional[EmbeddedResource] = None
    archived_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Account was archived, if archived',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    city: Optional[str] = Field(None, description='City', examples=['Dufftown'])
    company_stage: Optional[EmbeddedResource] = None
    company_type: Optional[str] = Field(
        None, description="Type of the Account's company", examples=['Private']
    )
    conversational_name: Optional[str] = Field(
        None, description='Conversational name of the Account', examples=['Hogwarts']
    )
    country: Optional[str] = Field(None, description='Country', examples=['Scotland'])
    counts: Optional[EmbeddedAccountCounts] = None
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Account was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    creator: Optional[EmbeddedResource] = None
    crm_id: Optional[str] = Field(
        None, description='CRM ID', examples=['003i000001mnhpD']
    )
    crm_object_type: Optional[str] = Field(
        None, description='CRM object type', examples=['account']
    )
    crm_url: Optional[str] = Field(
        None,
        description='CRM url',
        examples=['https://na15.salesforce.com/003i000001mnhpD'],
    )
    custom_fields: Optional[Dict[str, Any]] = Field(
        None,
        description="Custom fields are defined by the user's team. Only fields with values are presented in the API.",
        examples=[{'MyField': 'A Value', 'Other': 'Field'}],
    )
    description: Optional[str] = Field(
        None,
        description='Description',
        examples=['British school of magic for students'],
    )
    do_not_contact: Optional[bool] = Field(
        None,
        description='Whether this company has opted out of communications. Do not contact someone at this company when this is set to true',
        examples=[True],
    )
    domain: Optional[str] = Field(
        None,
        description='Website domain, not a fully qualified URI',
        examples=['salesloft.com'],
    )
    founded: Optional[str] = Field(
        None, description='Date or year of founding', examples=['March 1st, 1820']
    )
    id: Optional[int] = Field(None, description='ID of Account', examples=[1])
    industry: Optional[str] = Field(
        None, description='Industry', examples=['Education']
    )
    last_contacted_at: Optional[datetime] = Field(
        None,
        description='Datetime this Account was last contacted',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    last_contacted_by: Optional[EmbeddedResource] = None
    last_contacted_person: Optional[EmbeddedResource] = None
    last_contacted_type: Optional[str] = Field(
        None,
        description='The type of the last touch to this Account. Can be call, email, other',
        examples=['call'],
    )
    linkedin_url: Optional[str] = Field(
        None,
        description='Full LinkedIn url',
        examples=['https://www.linkedin.com/company/2296178/'],
    )
    locale: Optional[str] = Field(
        None, description='Time locale', examples=['Europe/London']
    )
    name: Optional[str] = Field(
        None,
        description='Account Full Name',
        examples=['Hogwarts School of Witchcraft and Wizardry'],
    )
    owner: Optional[EmbeddedResource] = None
    owner_crm_id: Optional[str] = Field(
        None,
        description='Mapped owner field from the CRM',
        examples=['003i000001mnhpD'],
    )
    phone: Optional[str] = Field(
        None,
        description='Phone number without formatting',
        examples=['+1 444 555 6666'],
    )
    postal_code: Optional[str] = Field(
        None, description='Postal code', examples=['55555']
    )
    revenue_range: Optional[str] = Field(
        None, description='Estimated revenue range', examples=['1,000,000-2,000,000']
    )
    size: Optional[str] = Field(
        None, description='Estimated number of people in employment', examples=['1500']
    )
    state: Optional[str] = Field(None, description='State', examples=['Mortlach'])
    street: Optional[str] = Field(
        None, description='Street name and number', examples=['4 Picket Drive']
    )
    tags: Optional[List[str]] = Field(
        None,
        description='All tags applied to this Account',
        examples=[['7-23-2017', 'dreamforce']],
    )
    twitter_handle: Optional[str] = Field(
        None, description='Twitter handle, with @', examples=['@kyleporter']
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Account was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    user_relationships: Optional[Dict[str, Any]] = Field(
        None,
        description='Filters by accounts matching all given user relationship fields, _is_null or _unmapped can be passed to filter accounts with null or unmapped user relationship values',
        examples=[{'Other': '_is_null', 'bff': '0037h00000d78aAAAQ'}],
    )
    website: Optional[str] = Field(
        None, description='Website', examples=['https://salesloft.com']
    )


class AccountUpsert(BaseModel):
    account: Optional[Account] = None
    upsert_type: Optional[str] = Field(
        None, description='The type of upsert. One of: create, update'
    )


class Action(BaseModel):
    action_details: Optional[EmbeddedResource] = None
    cadence: Optional[EmbeddedResource] = None
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Action was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    due: Optional[bool] = Field(
        None, description='Whether this step is due', examples=[True]
    )
    due_on: Optional[datetime] = Field(
        None,
        description='When action is due',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    id: Optional[int] = Field(None, description='ID of Action', examples=[1])
    multitouch_group_id: Optional[int] = Field(
        None, description='ID of the multitouch group', examples=[1]
    )
    person: Optional[EmbeddedResource] = None
    status: Optional[str] = Field(
        None,
        description='The current state of the person on the cadence. Possible values are:\n\nin_progress: this action has not been completed\n\npending_activity: this action has been acted upon, but the action has not been completed.\n(i.e. the email is scheduled to send, but has not been delivered yet)\n',
        examples=['in_progress'],
    )
    step: Optional[EmbeddedResource] = None
    type: Optional[str] = Field(
        None,
        description='The type of this action. Valid types are: email, phone, other. New types may be added in the future.\n',
        examples=['phone'],
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the Action was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    user: Optional[EmbeddedResource] = None


class Cadence(BaseModel):
    added_stage: Optional[EmbeddedResource] = None
    archived_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the cadence was archived, if archived',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    bounced_stage: Optional[EmbeddedResource] = None
    cadence_framework_id: Optional[int] = Field(
        None,
        description='ID of the cadence framework used to create steps for the cadence',
        examples=[1],
    )
    cadence_function: Optional[str] = Field(
        None,
        description='The use case of the cadence. Possible values are:\n\noutbound: Denotes an outbound cadence, typically for sales purposes\n\ninbound: Denotes an inbound sales cadence\n\nevent: Denotes a cadence used for an upcoming event\n\nother: Denotes a cadence outside of the standard process\n',
        examples=['outbound'],
    )
    cadence_priority: Optional[EmbeddedResource] = None
    counts: Optional[CadenceCounts] = None
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the cadence was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    creator: Optional[EmbeddedResource] = None
    draft: Optional[bool] = Field(
        None, description='Whether this cadence is in draft mode', examples=[False]
    )
    external_identifier: Optional[str] = Field(
        None, description='Cadence External ID', examples=['This is my external id']
    )
    finished_stage: Optional[EmbeddedResource] = None
    groups: Optional[List[EmbeddedResource]] = Field(
        None,
        description='Groups to which this cadence is assigned, if any',
        examples=[[{'_href': 'https://api.salesloft.com/v2/groups/921', 'id': 921}]],
    )
    id: Optional[int] = Field(None, description='ID of cadence', examples=[1])
    name: Optional[str] = Field(
        None, description='Cadence name', examples=['Prospecting - VP of Sales']
    )
    opt_out_link_included: Optional[bool] = Field(
        None,
        description='Whether this cadence is configured to include an opt-out link by default',
        examples=[True],
    )
    owner: Optional[EmbeddedResource] = None
    remove_bounces_enabled: Optional[bool] = Field(
        None,
        description='Whether this cadence is configured to automatically remove people who have bounced',
        examples=[True],
    )
    remove_replies_enabled: Optional[bool] = Field(
        None,
        description='Whether this cadence is configured to automatically remove people who have replied',
        examples=[True],
    )
    replied_stage: Optional[EmbeddedResource] = None
    shared: Optional[bool] = Field(
        None,
        description='Whether this cadence is visible to team members (shared)',
        examples=[False],
    )
    tags: Optional[List[str]] = Field(
        None,
        description='All tags applied to this cadence',
        examples=[['7-23-2017', 'dreamforce']],
    )
    team_cadence: Optional[bool] = Field(
        None,
        description='Whether this cadence is a team cadence.  A team cadence is created by an admin and can be run by all users',
        examples=[False],
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the cadence was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )


class CadenceImport(BaseModel):
    cadence: Optional[EmbeddedResource] = None


class CadenceMembership(BaseModel):
    added_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the person was last added to this cadence',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    cadence: Optional[EmbeddedResource] = None
    counts: Optional[CadenceMembershipCounts] = None
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the person was first added to this cadence',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    current_state: Optional[str] = Field(
        None,
        description="The current state of the person on the cadence. Possible values are:\n\nprocessing: The person is being processed on a cadence. Cadence-related changes cannot be made at this time\n\nstaged: The person is waiting for the first step in the cadence to occur\n\nactive: The cadence has begun processing this person and is still in the process, but idle\n\nscheduled: The cadence has begun processing this person and is still in the process, with an activity scheduled to occur\n\ncompleted: The cadence has been completed for this person\n\nremoved: The person was manually or automatically removed from the cadence\n\nremoved_no_action: The person was removed from the cadence before any action occurred\n\nreassigned: The person's cadence execution was transferred to a different user, ending this user's interaction\n",
        examples=['staged'],
    )
    currently_on_cadence: Optional[bool] = Field(
        None,
        description='Whether the person is currently on the cadence',
        examples=[False],
    )
    id: Optional[int] = Field(None, description='Cadence membership ID', examples=[1])
    latest_action: Optional[EmbeddedResource] = None
    person: Optional[EmbeddedResource] = None
    person_deleted: Optional[bool] = Field(
        None,
        description='Whether the associated person has since been deleted',
        examples=[False],
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the record was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    user: Optional[EmbeddedResource] = None


class Call(BaseModel):
    action: Optional[EmbeddedResource] = None
    cadence: Optional[EmbeddedResource] = None
    called_person: Optional[EmbeddedResource] = None
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the call was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    crm_activity: Optional[EmbeddedResource] = None
    disposition: Optional[str] = Field(
        None, description='Result of the call', examples=['Connected']
    )
    duration: Optional[int] = Field(
        None, description='Length of the call in seconds', examples=[60]
    )
    id: Optional[int] = Field(None, description='ID of Call', examples=[1])
    note: Optional[EmbeddedResource] = None
    recordings: Optional[List[EmbeddedRecordingResource]] = Field(
        None,
        description='The recordings for this this call and their status',
        examples=[
            [
                {
                    'recording_status': 'completed',
                    'status': 'completed',
                    'url': 'https://example.com/recording1',
                }
            ]
        ],
    )
    sentiment: Optional[str] = Field(
        None, description='Outcome of the conversation', examples=['Demo Scheduled']
    )
    step: Optional[EmbeddedResource] = None
    to: Optional[str] = Field(
        None, description='Phone number that received the call', examples=['7705551234']
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the call was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    user: Optional[EmbeddedResource] = None


class CallDataRecord(BaseModel):
    call: Optional[EmbeddedResource] = None
    call_type: Optional[str] = Field(
        None,
        description='Type of the call. Can be one of: call, bridge, collaboration. Though exact values may change over time',
        examples=['call'],
    )
    call_uuid: Optional[str] = Field(
        None,
        description='UUID of the call. Legs of the same call will have the same call_uuid.',
        examples=['5c5c1f32-bff1-4b7c-8f2a-bd650b829c67'],
    )
    called_person: Optional[EmbeddedResource] = None
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the call was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    direction: Optional[str] = Field(
        None,
        description='Direction of the call. Can be one of: inbound, outbound',
        examples=['outbound'],
    )
    duration: Optional[int] = Field(
        None, description='Length of the call in seconds', examples=[60]
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='Phone number that placed the call',
        examples=['7705551234'],
    )
    id: Optional[int] = Field(None, description='ID of CallDataRecord', examples=[1])
    recording: Optional[EmbeddedRecordingResource] = None
    status: Optional[str] = Field(
        None,
        description='The outcome of the call. Can be one of: queued, initiated, ringing, in-progress, completed, busy, no-answer, canceled, failed',
        examples=['completed'],
    )
    to: Optional[str] = Field(
        None, description='Phone number that received the call', examples=['7705551234']
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the call was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    user: Optional[EmbeddedResource] = None


class CallerId(BaseModel):
    account_name: Optional[str] = Field(
        None,
        description='The account of the person calling',
        examples=['Bunty Soap Company'],
    )
    display_name: Optional[str] = Field(
        None,
        description='The name of the person calling',
        examples=['Frank Galikanokus'],
    )
    person: Optional[EmbeddedResource] = None
    title: Optional[str] = Field(
        None,
        description='The title of the person calling',
        examples=['Transportation Coordinator'],
    )


class CrmActivity(BaseModel):
    activity_type: Optional[str] = Field(
        None,
        description='The type of activity that is being recorded, if available. The values can change over time, but could be one of: email, phone, email reminder, inmail',
        examples=['phone'],
    )
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the crm activity was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    crm_id: Optional[str] = Field(
        None,
        description='The ID of the activity in your CRM, if written to your CRM',
        examples=['00T0H00003w2FBhUAM'],
    )
    custom_crm_fields: Optional[Dict[str, Any]] = Field(
        None,
        description='Additional fields that are logged to your CRM, if mapped by the team at the time of writing to your CRM',
        examples=[{'ecorp__Call_Type__c': 'inbound follow up'}],
    )
    description: Optional[str] = Field(
        None,
        description='The description field of the activity in your CRM',
        examples=['Timeline is 2 weeks for demo, set with Kate'],
    )
    error: Optional[str] = Field(
        None,
        description='Information about why this crm activity failed to sync, if it did fail to sync. Failed activities will be automatically retried and may become successful in the future',
        examples=['Could not find a CRM account link.'],
    )
    id: Optional[int] = Field(None, description='CrmActivity ID', examples=[1])
    person: Optional[EmbeddedResource] = None
    subject: Optional[str] = Field(
        None,
        description='The subject field of the activity in your CRM',
        examples=['Call: Connected | Interested'],
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the crm activity was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    user: Optional[EmbeddedResource] = None


class CrmUser(BaseModel):
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the crm user was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    crm_id: Optional[str] = Field(
        None, description='CRM ID', examples=['5003000000D8cuIQAA']
    )
    id: Optional[int] = Field(None, description='Crm User ID', examples=[1])
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the crm user was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    user: Optional[EmbeddedResource] = None


class Email(BaseModel):
    action: Optional[EmbeddedResource] = None
    bounced: Optional[bool] = Field(
        None, description='Whether this email bounced', examples=[False]
    )
    cadence: Optional[EmbeddedResource] = None
    click_tracking: Optional[bool] = Field(
        None,
        description='Whether this email had click tracking enabled',
        examples=[True],
    )
    counts: Optional[EmailCounts] = None
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the email was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    crm_activity: Optional[EmbeddedResource] = None
    email_template: Optional[EmbeddedResource] = None
    error_message: Optional[str] = Field(
        None,
        description='Error message of the email. This field has been determined sensitive and requires a specific scope to access it.',
    )
    headers: Optional[Dict[str, Any]] = Field(
        None,
        description='Selected headers that are included if this email used them. Available keys are: cc, bcc',
        examples=[{'bcc': 'track@salesforce.com', 'cc': 'sb@salesloft.com'}],
    )
    id: Optional[int] = Field(None, description='ID of Email', examples=[1])
    mailing: Optional[EmbeddedResource] = None
    personalization: Optional[str] = Field(
        None,
        description='Percentage of this email that has been personalized',
        examples=['13.4'],
    )
    recipient: Optional[EmbeddedResource] = None
    recipient_email_address: Optional[str] = Field(
        None,
        description='Email address of the recipient',
        examples=['bob.smith@example.com'],
    )
    send_after: Optional[datetime] = Field(
        None,
        description='When this email will be sent, or null if already sent',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    sent_at: Optional[datetime] = Field(
        None,
        description='When this email was sent, or null if it was not sent',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    status: Optional[str] = Field(
        None,
        description='Status of this email through the sending process. Possible values are: sent, sent_from_gmail, sent_from_external, pending, pending_reply_check, scheduled, sending, delivering, failed, cancelled, pending_through_gmail, pending_through_external',
        examples=['sent'],
    )
    step: Optional[EmbeddedResource] = None
    subject: Optional[str] = Field(
        None,
        description='Subject of the email. This field has been determined sensitive and requires a specific scope to access it.',
    )
    task: Optional[EmbeddedResource] = None
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the email was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    user: Optional[EmbeddedResource] = None
    view_tracking: Optional[bool] = Field(
        None,
        description='Whether this email had view tracking enabled',
        examples=[True],
    )


class EmailTemplate(BaseModel):
    field_links: Optional[Dict[str, Any]] = Field(
        None,
        alias='_links',
        description='Links to attachments and tags resources for this email template.',
        examples=[
            {
                'attachments': 'https://api.salesloft.com/v2/email_template_attachments?email_template_id[]=1'
            }
        ],
    )
    archived_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the email template was archived, if archived',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    body: Optional[str] = Field(
        None,
        description='Sanitized body of the email template without email signature',
        examples=[
            '<div><div>Welcome to the SalesLoft family! My name is Sarah and I’m your implementation consultant. I’m here to get you up and running. It\'s my job to help you configure your team\'s SalesLoft access, provide customized training for your specific goals, and make sure that you and your team are ready to crush your goals.</div><div dir="ltr"><br></div>Thank you,<br></div>'
        ],
    )
    body_preview: Optional[str] = Field(
        None,
        description='A plain text version of the first 100 characters of the body of the email template',
        examples=[
            "hello\n\nhey sounds good\n\nok\n\nok\n\nwith an edit\n\nok now i'm comic sans 14"
        ],
    )
    cadence_template: Optional[bool] = Field(
        None,
        description='Whether this email template is only used on a cadence step. These templates are not visible in the SalesLoft application template list. If false, this email template is visible in the SalesLoft application, and may be used when composing an email or creating a cadence step.',
        examples=[True],
    )
    click_tracking_enabled: Optional[bool] = Field(
        None,
        description='Whether click tracking is enabled for this email template',
        examples=[True],
    )
    counts: Optional[EmailTemplateCounts] = None
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the email template was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    groups: Optional[List[EmbeddedResource]] = Field(
        None,
        description='Groups to which this template is assigned, if any',
        examples=[[{'_href': 'https://api.salesloft.com/v2/groups/921', 'id': 921}]],
    )
    id: Optional[int] = Field(None, description='ID of email template', examples=[5])
    last_used_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the email template was last used',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    open_tracking_enabled: Optional[bool] = Field(
        None,
        description='Whether open tracking is enabled for this email template',
        examples=[True],
    )
    shared: Optional[bool] = Field(
        None,
        description='Whether this email template is visible to team members (shared)',
        examples=[False],
    )
    subject: Optional[str] = Field(
        None,
        description='Subject of the email template',
        examples=['Welcome to SalesLoft!'],
    )
    tags: Optional[List[str]] = Field(
        None,
        description='All tags applied to this email template',
        examples=[['7-23-2017', 'internal']],
    )
    team_template: Optional[EmbeddedResource] = None
    template_owner: Optional[EmbeddedResource] = None
    title: Optional[str] = Field(
        None, description='Title of the email template', examples=['Welcome email']
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the email template was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )


class EmailTemplateAttachment(BaseModel):
    attachment_content_type: Optional[str] = Field(
        None, description='Content type of the attachment', examples=['pdf, jpeg']
    )
    attachment_file_size: Optional[int] = Field(
        None, description='The size of the attachment', examples=[2]
    )
    attachment_fingerprint: Optional[int] = Field(
        None, description='Unique attachment Identifier', examples=[13231232]
    )
    attachment_id: Optional[int] = Field(
        None, description='ID of the email template attachment', examples=[10]
    )
    download_url: Optional[str] = Field(
        None,
        description='Download url of the attachment',
        examples=['https://path/to/example_attachment.gif'],
    )
    email_template: Optional[EmbeddedResource] = None
    id: Optional[int] = Field(
        None, description='ID of email template attachment association', examples=[5]
    )
    name: Optional[str] = Field(
        None, description='Name of the attachment', examples=['example_attachment.gif']
    )
    scanned: Optional[bool] = Field(
        None, description='Checks if attachment has been scanned', examples=[True]
    )


class MeetingSetting(BaseModel):
    active_meeting_url: Optional[MeetingUrl] = None
    allow_booking_on_behalf: Optional[bool] = Field(
        None,
        description='Allow other team members to schedule on you behalf.',
        examples=[True],
    )
    allow_booking_overtime: Optional[bool] = Field(
        None,
        description='Allow team members to insert available time outside your working hours.',
        examples=[True],
    )
    allow_event_overlap: Optional[bool] = Field(
        None,
        description='Allow team members to double book events on your calendar.',
        examples=[False],
    )
    availability_limit: Optional[int] = Field(
        None,
        description='The number of days out the user allows a prospect to schedule a meeting',
        examples=[14],
    )
    availability_limit_enabled: Optional[bool] = Field(
        None, description='If Availability Limits have been turned on', examples=[True]
    )
    buffer_time_duration: Optional[int] = Field(
        None,
        description='Default buffer duration in minutes set by a user',
        examples=['15'],
    )
    calendar_type: Optional[str] = Field(
        None, description='Calendar type', examples=['gmail']
    )
    created_at: Optional[date] = Field(
        None,
        description='Datetime of when the MeetingSetting was created',
        examples=['2022-09-15T11:40:59.055583+03:00'],
    )
    default_meeting_length: Optional[int] = Field(
        None,
        description='Default meeting length in minutes set by the user',
        examples=['30'],
    )
    description: Optional[str] = Field(
        None,
        description='Default description of the meeting',
        examples=['This meeting is held on a daily basis'],
    )
    email_address: Optional[str] = Field(
        None,
        description="Calendar owner's email address",
        examples=['calendar.owner@example.com'],
    )
    enable_calendar_sync: Optional[bool] = Field(
        None,
        description='Determines if a user enabled Calendar Sync feature',
        examples=[False],
    )
    enable_dynamic_location: Optional[bool] = Field(
        None,
        description='Determines if location will be filled via third-party service (Zoom, GoToMeeting, etc.)',
        examples=[False],
    )
    id: Optional[int] = Field(
        None, description='ID of the MeetingSetting', examples=[1]
    )
    location: Optional[str] = Field(
        None, description='Default location of the meeting', examples=['Atlanta, GA']
    )
    primary_calendar_connection_failed: Optional[bool] = Field(
        None,
        description='Gets true when any issue with fetching calendar occurs',
        examples=[False],
    )
    primary_calendar_id: Optional[str] = Field(
        None,
        description='ID of the primary calendar',
        examples=['a98iu0@group.calendar.google.com'],
    )
    primary_calendar_name: Optional[str] = Field(
        None,
        description='Display name of the primary calendar',
        examples=['My Meetings Calendar'],
    )
    schedule_buffer_enabled: Optional[bool] = Field(
        None,
        description='Determines if meetings are scheduled with a 15 minute buffer between them',
        examples=[True],
    )
    schedule_delay: Optional[int] = Field(
        None,
        description='The number of hours in advance a user requires someone to a book a meeting with them',
        examples=[2],
    )
    share_event_detail: Optional[bool] = Field(
        None,
        description='Allow team members to see the details of events on your calendar.',
        examples=[False],
    )
    time_zone: Optional[str] = Field(
        None, description='Time zone for current calendar', examples=['US/Eastern']
    )
    times_available: Optional[Dict[str, Any]] = Field(
        None,
        description='Times available set by a user that can be used to book meetings',
        examples=[
            {'monday': {'enabled': True, 'end_time': '17:00', 'start_time': '09:00'}}
        ],
    )
    title: Optional[str] = Field(
        None, description='Default title of the meeting', examples=['Daily stand-up']
    )
    updated_at: Optional[date] = Field(
        None,
        description='Datetime of when the MeetingSetting was last updated',
        examples=['2022-09-15T11:40:59.055628+03:00'],
    )
    user: Optional[EmbeddedResource] = None
    user_details: Optional[Dict[str, Any]] = Field(
        None,
        description='User details',
        examples=[{'email': 'john.doe@salesloft.com', 'name': 'John Doe'}],
    )
    user_slug: Optional[str] = Field(
        None,
        description='User slug generated with a full name of the user',
        examples=['john-doe'],
    )


class Person(BaseModel):
    account: Optional[EmbeddedResource] = None
    bouncing: Optional[bool] = Field(
        None,
        description="Whether this person's current email address has bounced",
        examples=[False],
    )
    cadences: Optional[List[EmbeddedResource]] = Field(
        None,
        description='The list of active cadences person is added to',
        examples=[[{'_href': 'https://api.salesloft.com/v2/cadences/1', 'id': 1}]],
    )
    city: Optional[str] = Field(None, description='City', examples=['Atlanta'])
    contact_restrictions: Optional[List[str]] = Field(
        None,
        description='Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message',
        examples=[['call', 'email', 'message']],
    )
    country: Optional[str] = Field(
        None, description='Country', examples=['United States']
    )
    counts: Optional[PersonCounts] = None
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the person was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    crm_id: Optional[str] = Field(
        None, description='CRM ID', examples=['003i000001mnhpD']
    )
    crm_object_type: Optional[str] = Field(
        None, description='CRM object type', examples=['Lead']
    )
    crm_url: Optional[str] = Field(
        None,
        description='CRM url',
        examples=['https://na15.salesforce.com/003i000001mnhpD'],
    )
    custom_fields: Optional[Dict[str, Any]] = Field(
        None,
        description="Custom fields are defined by the user's team. Only fields with values are presented in the API.",
        examples=[{'MyField': 'A Value', 'Other': 'Field'}],
    )
    display_name: Optional[str] = Field(
        None,
        description="Either the full name or the email address. Use this when showing a person's name",
        examples=['Pat Johnson'],
    )
    do_not_contact: Optional[bool] = Field(
        None,
        description='Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed.',
        examples=[True],
    )
    email_address: Optional[str] = Field(
        None, description='Email address', examples=['pat.johnson@example.com']
    )
    eu_resident: Optional[bool] = Field(
        None,
        description='Whether this person is marked as a European Union Resident or not',
        examples=[False],
    )
    first_name: Optional[str] = Field(None, description='First name', examples=['Pat'])
    full_email_address: Optional[str] = Field(
        None,
        description='Full email address with name',
        examples=['Pat Johnson <pat.johnson@example.com>'],
    )
    home_phone: Optional[str] = Field(
        None, description='Home phone without formatting', examples=['+1 444 555 6666']
    )
    id: Optional[int] = Field(None, description='Person ID', examples=[1])
    import_: Optional[EmbeddedResource] = Field(None, alias='import')
    job_seniority: Optional[str] = Field(
        None,
        description='The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown',
        examples=['vice_president'],
    )
    last_completed_step: Optional[EmbeddedResource] = None
    last_completed_step_cadence: Optional[EmbeddedResource] = None
    last_contacted_at: Optional[datetime] = Field(
        None,
        description='Last datetime this person was contacted',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    last_contacted_by: Optional[EmbeddedResource] = None
    last_contacted_type: Optional[str] = Field(
        None,
        description='The type of the last touch to this person. Can be call, email, other',
        examples=['call'],
    )
    last_name: Optional[str] = Field(
        None, description='Last name', examples=['Johnson']
    )
    last_replied_at: Optional[datetime] = Field(
        None,
        description='Last datetime this person replied to an email',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    linkedin_url: Optional[str] = Field(
        None,
        description='Linkedin URL',
        examples=['https://www.linkedin.com/in/username'],
    )
    locale: Optional[str] = Field(
        None, description='Time locale of the person', examples=['US/Eastern']
    )
    locale_utc_offset: Optional[int] = Field(
        None,
        description="The locale's timezone offset from UTC in minutes",
        examples=[-480],
    )
    mobile_phone: Optional[str] = Field(
        None,
        description='Mobile phone without formatting',
        examples=['+1 444 555 6666'],
    )
    most_recent_cadence: Optional[EmbeddedResource] = None
    owner: Optional[EmbeddedResource] = None
    owner_crm_id: Optional[str] = Field(
        None,
        description='Mapped owner field from your CRM',
        examples=['003i000001mnhpD'],
    )
    person_company_industry: Optional[str] = Field(
        None,
        description='Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended',
        examples=['Information Technology'],
    )
    person_company_name: Optional[str] = Field(
        None,
        description='Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended',
        examples=['SalesLoft'],
    )
    person_company_website: Optional[str] = Field(
        None,
        description='Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended',
        examples=['https://salesloft.com'],
    )
    person_stage: Optional[EmbeddedResource] = None
    personal_email_address: Optional[str] = Field(
        None, description='Personal email address', examples=['pat.johnson@example.com']
    )
    personal_website: Optional[str] = Field(
        None,
        description='The website of this person',
        examples=['https://salesloft.com'],
    )
    phone: Optional[str] = Field(
        None, description='Phone without formatting', examples=['+1 444 555 6666']
    )
    phone_extension: Optional[str] = Field(
        None, description='Phone extension without formatting', examples=['x123']
    )
    secondary_email_address: Optional[str] = Field(
        None,
        description='Alternate email address',
        examples=['pat.johnson@example.com'],
    )
    starred: Optional[bool] = Field(
        None,
        description='Whether this person is starred by the current user',
        examples=[True],
    )
    state: Optional[str] = Field(None, description='State', examples=['Georgia'])
    success_count: Optional[int] = Field(
        None,
        description="The person's success count. 1 if person has any active successes, 0 otherwise.",
        examples=[1],
    )
    tags: Optional[List[str]] = Field(
        None,
        description='All tags applied to this person',
        examples=[['7-23-2017', 'dreamforce']],
    )
    title: Optional[str] = Field(
        None, description='Job title', examples=['Sales Development Representative']
    )
    twitter_handle: Optional[str] = Field(
        None, description='The twitter handle of this person', examples=['@kyleporter']
    )
    untouched: Optional[bool] = Field(
        None, description="The person's untouched status", examples=[False]
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the person was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    work_city: Optional[str] = Field(
        None, description='Work location - city', examples=['Atlanta']
    )
    work_country: Optional[str] = Field(
        None, description='Work location - country', examples=['United States']
    )
    work_state: Optional[str] = Field(
        None, description='Work location - state', examples=['Georgia']
    )


class PersonUpsert(BaseModel):
    person: Optional[Person] = None
    upsert_type: Optional[str] = Field(
        None, description='The type of upsert. One of: create, update'
    )


class Success(BaseModel):
    counts: Optional[SuccessCounts] = None
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the success was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    id: Optional[int] = Field(None, description='ID of success', examples=[1])
    latest_action: Optional[EmbeddedResource] = None
    latest_cadence: Optional[EmbeddedResource] = None
    latest_call: Optional[EmbeddedResource] = None
    latest_email: Optional[EmbeddedResource] = None
    latest_step: Optional[EmbeddedResource] = None
    person: Optional[EmbeddedResource] = None
    succeeded_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the success was recorded',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    success_window_started_at: Optional[datetime] = Field(
        None,
        description='Datetime of when this person was first worked, leading up to the success',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the success was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    user: Optional[EmbeddedResource] = None


class TeamTemplate(BaseModel):
    field_links: Optional[Dict[str, Any]] = Field(
        None,
        alias='_links',
        description='Links to attachments resource for this template ',
        examples=[
            {
                'attachments': 'https://api.salesloft.com/v2/team_template_attachments?team_template_id[]=1'
            }
        ],
    )
    archived_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the team template was archived, if archived',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    body: Optional[str] = Field(
        None,
        description='Body of the team template',
        examples=[
            '<div>Do you know about birds?</div><div>You can find them here:\xa0<a href="https://www.allaboutbirds.org/guide/search/" target="_blank">https://www.allaboutbirds.org/guide/search/</a></div>'
        ],
    )
    body_preview: Optional[str] = Field(
        None,
        description='A plain text version of the first 100 characters of the body of the team template',
        examples=[
            "hello\n\nhey sounds good\n\nok\n\nok\n\nwith an edit\n\nok now i'm comic sans 14"
        ],
    )
    click_tracking_enabled: Optional[bool] = Field(
        None,
        description='Whether click tracking is enabled for this team template',
        examples=[True],
    )
    counts: Optional[TeamTemplateCounts] = None
    created_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the team template was created',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    id: Optional[str] = Field(
        None,
        description='ID of team template',
        examples=['51226150-3108-4dea-883b-0c0d7388f456'],
    )
    last_modified_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the team template was last modified',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    last_modified_user: Optional[EmbeddedResource] = None
    last_used_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the team template was last used',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
    open_tracking_enabled: Optional[bool] = Field(
        None,
        description='Whether open tracking is enabled for this team template',
        examples=[True],
    )
    subject: Optional[str] = Field(
        None,
        description='Subject of the team template',
        examples=['It’s time to say goodbye'],
    )
    tags: Optional[List[str]] = Field(
        None,
        description='All tags applied to this team template',
        examples=[['7-23-2017', 'internal']],
    )
    title: Optional[str] = Field(
        None, description='Title of the team template', examples=['VP Breakup Email']
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='Datetime of when the team template was last updated',
        examples=['2023-01-01T00:00:00.000000-05:00'],
    )
